import requests
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
import schedule
from datetime import timedelta
import time
from datetime import datetime
import os
import sys


from dotenv import load_dotenv

# Charge les variables d'environnement depuis le fichier .env
load_dotenv()



API_TOKEN = os.getenv("API_TOKEN")
GRAFANA_URL = os.getenv("GRAFANA_URL")
DASHBOARD_UID = os.getenv("DASHBOARD_UID")
OUTPUT_DIR = os.getenv("OUTPUT_DIR")
TEMP_IMAGE = os.getenv("TEMP_IMAGE")


# Configuration
if not API_TOKEN:
    print("‚ùå Erreur : Le token API Grafana n'est pas d√©fini !")
    sys.exit(1)

# Headers pour l‚Äôauthentification
HEADERS = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Accept": "application/json"
}

def fetch_dashboard_data():
    """R√©cup√®re les m√©tadonn√©es du dashboard via l‚ÄôAPI Grafana."""
    url = f"{GRAFANA_URL}/api/dashboards/uid/{DASHBOARD_UID}"
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code == 200:
        print("‚úÖ M√©tadonn√©es du dashboard r√©cup√©r√©es avec succ√®s")
        return response.json()
    else:
        print(f"‚ùå Erreur lors de la r√©cup√©ration du dashboard : {response.status_code}")
        return None

def fetch_dashboard_image():
    """R√©cup√®re une image rendue du dashboard via l‚ÄôAPI de rendu."""
    current_time = datetime.now()
    from_time = int((current_time - timedelta(days=30)).timestamp() * 1000)
    to_time = int(current_time.timestamp() * 1000)

    render_url = f"{GRAFANA_URL}/render/d/{DASHBOARD_UID}?width=1000&height=500&from={from_time}&to={to_time}"
    response = requests.get(render_url, headers=HEADERS)
    
    if response.status_code == 200:
        with open(TEMP_IMAGE, "wb") as f:
            f.write(response.content)
        print("‚úÖ Image du dashboard r√©cup√©r√©e avec succ√®s")
        return TEMP_IMAGE
    else:
        print(f"‚ùå Erreur lors du rendu de l‚Äôimage : {response.status_code}")
        return None

def generate_pdf():
    """G√©n√®re un PDF avec les informations et l‚Äôimage du dashboard."""
    print("üìÑ G√©n√©ration du rapport PDF...")
    
    dashboard_data = fetch_dashboard_data()
    if not dashboard_data:
        return

    # Plage des 30 derniers jours
    start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
    end_date = datetime.now().strftime("%Y-%m-%d")
    pdf_file = f"{OUTPUT_DIR}/Usage_Insights_Overview_{start_date}_to_{end_date}.pdf"

    os.makedirs(OUTPUT_DIR, exist_ok=True)

    doc = SimpleDocTemplate(pdf_file, pagesize=letter)
    styles = getSampleStyleSheet()
    story = []

    # Titre du rapport avec la plage des 30 derniers jours
    story.append(Paragraph(f"Rapport sur les 30 derniers jours - Usage Insights ({start_date} au {end_date})", styles['Title']))
    story.append(Spacer(1, 20))

    title = dashboard_data.get("dashboard", {}).get("title", "N/A")
    story.append(Paragraph(f"Dashboard : {title}", styles['Heading2']))
    story.append(Paragraph(f"UID : {DASHBOARD_UID}", styles['Normal']))
    story.append(Spacer(1, 12))

    image_path = fetch_dashboard_image()
    if image_path and os.path.exists(image_path):
        story.append(Paragraph("Aper√ßu du dashboard :", styles['Heading3']))
        story.append(Image(image_path, width=500, height=250))
        story.append(Spacer(1, 12))
    else:
        story.append(Paragraph("‚ö†Ô∏è Impossible de r√©cup√©rer l‚Äôimage du dashboard.", styles['Normal']))

    story.append(Paragraph("Ce rapport est g√©n√©r√© automatiquement chaque mois.", styles['Italic']))

    # G√©n√©rer le PDF
    doc.build(story)
    print(f"‚úÖ PDF g√©n√©r√© avec succ√®s : {pdf_file}")

    # Supprimer l'image temporaire si elle existe
    if image_path and os.path.exists(image_path):
        os.remove(image_path)


def get_dashboards():
    """Affiche la liste des dashboards disponibles sur Grafana."""
    url = f"{GRAFANA_URL}/api/search"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        
        if not response.text.strip():
            print("‚ùå La r√©ponse de Grafana est vide.")
            return

        dashboards = response.json()
        print("üìä Liste des Dashboards disponibles :")
        for dashboard in dashboards:
            print(f"- {dashboard.get('title', 'Sans titre')} (UID: {dashboard.get('uid')})")

    except requests.exceptions.HTTPError as http_err:
        print(f"‚ùå Erreur HTTP : {http_err}")
    except requests.exceptions.RequestException as req_err:
        print(f"‚ùå Erreur de requ√™te : {req_err}")
    except ValueError as json_err:
        print(f"‚ùå Erreur lors de l'analyse JSON : {json_err}")

def monthly_report():
    print(f"‚è∞ D√©but de la g√©n√©ration du rapport mensuel ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
    generate_pdf()

def check_and_run_monthly_report():
    """V√©rifie si c'est le 1er du mois avant d'ex√©cuter le rapport."""
    if datetime.now().day == 1:
        monthly_report()

# Planification : V√©rifie chaque jour √† minuit et ex√©cute seulement le 1er du mois
schedule.every().day.at("00:00").do(monthly_report)

# Pour tester rapidement toutes les 10 secondes :
schedule.every(10).seconds.do(monthly_report)

print("üöÄ Script d√©marr√©. En attente de la prochaine ex√©cution...")

while True:
    print("‚è≥ En attente d'une t√¢che planifi√©e...")
    schedule.run_pending()
    time.sleep(60)  # V√©rifie les t√¢ches planifi√©es toutes les minutes

